"{\"notebook_name\":\"ExploreAtrractor.ipynb\"}\n\"import numpy as np\\nimport matplotlib.pyplot as plt\\nfrom mpl_toolkits.mplot3d import Axes3D\\nimport pandas as pd\\n%matplotlib inline\\n\\nclass Attractor(object):\\n    \\n    def __init__(self, s=10.0, p=28.0, b=(8.0/3.0), start=0.0, end=80.0, points=10000):\\n        self.s = s\\n        self.p = p\\n        self.b = b\\n        self.params = np.array([self.s, self.p, self.b])\\n        self.start = start\\n        self.end = end\\n        self.points = points\\n        self.t = np.linspace(self.start, self.end, self.points)\\n        self.dt = (self.end - self.start)/self.points\\n    \\n    def euler(self, a = np.array([]), dt = 0):\\n        if dt == 0:\\n            dt = self.dt\\n        x = a[0]\\n        y = a[1]\\n        z = a[2]\\n        dx = self.params[0] * (y - x)\\n        dy = x * (self.params[1] - z) - y\\n        dz = (x * y) - (self.params[2] * z)\\n        dtx = x + (dx * self.dt)\\n        dty = y + (dy * self.dt)\\n        dtz = z + (dz * self.dt)\\n        return np.array([dtx, dty, dtz])\\n        \\n    def rk2(self, b = np.array([])):\\n        dt = self.dt / 2.0\\n        rk1 = self.euler(b)\\n        x1 = b[0] + rk1[0] * new_dt\\n        y1 = b[1] + rk1[1] * new_dt\\n        z1 = b[2] + rk1[2] * new_dt\\n        return self.euler(np.array([x1, y1, z1]), dt)\\n        \\n              \\n    def rk3(self, c = np.array([])):\\n        dt = self.dt / 2.0\\n        rk2 = self.rk1(c)\\n        x2 = c[0] + rk2[0] * new_dt\\n        y2 = c[1] + rk2[1] * new_dt\\n        z2 = c[2] + rk2[2] * new_dt\\n        return self.euler(np.array([x2, y2, z2]), dt)\\n        \\n    def rk4(self, d = np.array([])):\\n        dt = self.dt\\n        dt = self.dt\\n        dt = self.dt\\n        rk3 = self.rk2(d)\\n        x3 = d[0] + rk3[0] * self.dt\\n        y3 = d[1] + rk3[1] * self.dt\\n        z3 = d[2] + rk3[2] * self.dt\\n        return self.euler(np.array([x3, y3, z3]), dt)\\n        \\n                            \\n    def evolve(self, r0 = np.array([0.1, 0.0, 0.0]), order=1):\\n        steps = np.array([])\\n        \\n        if order == 1:\\n            for i in len(self.t + 1)\\n                \\n            sol = self.euler(r0)\\n        elif order == 2:\\n            sol = self.rk2(r0)\\n        elif order == 4:\\n            sol = self.rk4(r0)\\n        else:\\n            return 'Uh oh'\\n        \\n        self.solution = pd.DataFrame(sol, columns=['t','x','y','z'])\\n        return self.solution\\n        \\n    def save(self):\\n        self.solution.to_csv(\\\"solution.csv\\\")\\n        \\n    def plotx(self):\\n        plt.plot(self.solution['x'], color='k')\\n        plt.title(\\\"Plot tx\\\")\\n        plt.tlabel(\\\"t\\\")\\n        plt.xlabel(\\\"X\\\")\\n        \\n        \\n    def ploty(self):\\n        plt.plot(self.solution['y'], color='k')\\n        plt.title(\\\"Plot ty\\\")\\n        plt.tlabel(\\\"t\\\")\\n        plt.ylabel(\\\"Y\\\")\\n        \\n    def plotz(self):\\n        plt.plot(self.solution['z'], color='k')\\n        plt.title(\\\"Plot tz\\\")\\n        plt.tlabel(\\\"t\\\")\\n        plt.zlabel(\\\"Z\\\")\\n        \\n    def plotxy(self):\\n        plt.plot(self.solution['x'], self.solution['y'], color='k')\\n        plt.title(\\\"Plot xy\\\")\\n        plt.xlabel(\\\"X\\\")\\n        plt.ylabel(\\\"Y\\\")\\n        \\n    def plotyz(self):\\n        plt.plot(self.solution['y'], self.solution['z'], color='k')\\n        plt.title(\\\"Plot yz\\\")\\n        plt.ylabel(\\\"Y\\\")\\n        plt.zlabel(\\\"Z\\\")\\n        \\n    def plotzx(self):\\n        plt.plot(self.solution['z'], self.solution['x'], color='k')\\n        plt.title(\\\"Plot zx\\\")\\n        plt.zlabel(\\\"Z\\\")\\n        plt.xlabel(\\\"X\\\")\\n    \\n    def plot3d(self):\\n        fig = plt.figure()\\n        ax = fig.gca(projection='3d')\\n\\n        ax.plot(self.solution['x'], self.solution['y'], self.solution['z'])\\n        ax.set_xlabel(\\\"X Axis\\\")\\n        ax.set_ylabel(\\\"Y Axis\\\")\\n        ax.set_zlabel(\\\"Z Axis\\\")\\n        ax.set_title(\\\"Lorenz Attractor\\\")\\n\\n        plt.show()\\n\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":4,\"outputs\":[]}\n\"a = Attractor()\\na.evolve()\\na.plot3d()\\n\"︡{\"metadata\":{\"scrolled\":false,\"collapsed\":false,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":5,\"outputs\":[{\"output_type\":\"error\",\"ename\":\"ValueError\",\"evalue\":\"Shape of passed values is (1, 3), indices imply (4, 3)\",\"traceback\":[\"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\"\\u001b[1;31mValueError\\u001b[0m                                Traceback (most recent call last)\",\"\\u001b[1;32m<ipython-input-5-ec4dc8794ef3>\\u001b[0m in \\u001b[0;36m<module>\\u001b[1;34m()\\u001b[0m\\n\\u001b[0;32m      1\\u001b[0m \\u001b[0ma\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mAttractor\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m----> 2\\u001b[1;33m \\u001b[0ma\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mevolve\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m      3\\u001b[0m \\u001b[0ma\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mplot3d\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;32m<ipython-input-4-3c977c4303c0>\\u001b[0m in \\u001b[0;36mevolve\\u001b[1;34m(self, r0, order)\\u001b[0m\\n\\u001b[0;32m     72\\u001b[0m             \\u001b[1;32mreturn\\u001b[0m \\u001b[1;34m'Uh oh'\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m     73\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m---> 74\\u001b[1;33m         \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0msolution\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mpd\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mDataFrame\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0msol\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mcolumns\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;34m't'\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;34m'x'\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;34m'y'\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;34m'z'\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m     75\\u001b[0m         \\u001b[1;32mreturn\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0msolution\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m     76\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;32m/projects/sage/sage-6.9/local/lib/python2.7/site-packages/pandas/core/frame.py\\u001b[0m in \\u001b[0;36m__init__\\u001b[1;34m(self, data, index, columns, dtype, copy)\\u001b[0m\\n\\u001b[0;32m    243\\u001b[0m             \\u001b[1;32melse\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    244\\u001b[0m                 mgr = self._init_ndarray(data, index, columns, dtype=dtype,\\n\\u001b[1;32m--> 245\\u001b[1;33m                                          copy=copy)\\n\\u001b[0m\\u001b[0;32m    246\\u001b[0m         \\u001b[1;32melif\\u001b[0m \\u001b[0misinstance\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mdata\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m(\\u001b[0m\\u001b[0mlist\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mtypes\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mGeneratorType\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    247\\u001b[0m             \\u001b[1;32mif\\u001b[0m \\u001b[0misinstance\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mdata\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mtypes\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mGeneratorType\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;32m/projects/sage/sage-6.9/local/lib/python2.7/site-packages/pandas/core/frame.py\\u001b[0m in \\u001b[0;36m_init_ndarray\\u001b[1;34m(self, values, index, columns, dtype, copy)\\u001b[0m\\n\\u001b[0;32m    410\\u001b[0m             \\u001b[0mvalues\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0m_possibly_infer_to_datetimelike\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mvalues\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    411\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 412\\u001b[1;33m         \\u001b[1;32mreturn\\u001b[0m \\u001b[0mcreate_block_manager_from_blocks\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[0mvalues\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m[\\u001b[0m\\u001b[0mcolumns\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mindex\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    413\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    414\\u001b[0m     \\u001b[1;33m@\\u001b[0m\\u001b[0mproperty\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;32m/projects/sage/sage-6.9/local/lib/python2.7/site-packages/pandas/core/internals.py\\u001b[0m in \\u001b[0;36mcreate_block_manager_from_blocks\\u001b[1;34m(blocks, axes)\\u001b[0m\\n\\u001b[0;32m   3548\\u001b[0m         \\u001b[0mblocks\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[1;33m[\\u001b[0m\\u001b[0mgetattr\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mb\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;34m'values'\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mb\\u001b[0m\\u001b[1;33m)\\u001b[0m \\u001b[1;32mfor\\u001b[0m \\u001b[0mb\\u001b[0m \\u001b[1;32min\\u001b[0m \\u001b[0mblocks\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   3549\\u001b[0m         \\u001b[0mtot_items\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0msum\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mb\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mshape\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;36m0\\u001b[0m\\u001b[1;33m]\\u001b[0m \\u001b[1;32mfor\\u001b[0m \\u001b[0mb\\u001b[0m \\u001b[1;32min\\u001b[0m \\u001b[0mblocks\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m-> 3550\\u001b[1;33m         \\u001b[0mconstruction_error\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mtot_items\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mblocks\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;36m0\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mshape\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;36m1\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0maxes\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0me\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m   3551\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   3552\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;32m/projects/sage/sage-6.9/local/lib/python2.7/site-packages/pandas/core/internals.py\\u001b[0m in \\u001b[0;36mconstruction_error\\u001b[1;34m(tot_items, block_shape, axes, e)\\u001b[0m\\n\\u001b[0;32m   3525\\u001b[0m         \\u001b[1;32mraise\\u001b[0m \\u001b[0me\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   3526\\u001b[0m     raise ValueError(\\\"Shape of passed values is {0}, indices imply {1}\\\".format(\\n\\u001b[1;32m-> 3527\\u001b[1;33m         passed,implied))\\n\\u001b[0m\\u001b[0;32m   3528\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   3529\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;31mValueError\\u001b[0m: Shape of passed values is (1, 3), indices imply (4, 3)\"]}]}\n\"%timeit Attractor\\n\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":3,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"10000000 loops, best of 3: 50.8 ns per loop\\n\"}]}\n\"%time Attractor\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":4,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"CPU times: user 0 ns, sys: 0 ns, total: 0 ns\\nWall time: 7.15 µs\\n\"},{\"execution_count\":4,\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"__main__.Attractor\"},\"metadata\":{}}]}\n\"\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}\n\"\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}"
{"patch":[[[[0,"    for "],[-1,"i"],[0," in len("]],2090,2090,17,16]],"time":1446004480836}
{"patch":[[[[0,"    for "],[1,"i"],[0," in len("]],2090,2090,16,17]],"time":1446004476838}
{"patch":[[[[0,"                "],[1,"steps"],[0,"\\n            so"]],2120,2120,32,37]],"time":1446004394718}
{"patch":[[[[0,"        "],[-1,"    steps"],[0,"\\n      "]],2124,2124,25,16]],"time":1446004390716}
{"patch":[[[[0,"        "],[-1,"\\n            "],[0,"sol = se"]],2124,2124,30,16]],"time":1446004386718}
{"patch":[[[[0,"p.array("],[-1,"[]"],[0,")\\n     "]],2035,2035,18,16]],"time":1446004382717}
{"patch":[[[[0,"= np"],[-1,".array()"],[0,"\\n  "]],2032,2032,16,8]],"time":1446004378711}
{"patch":[[[[0,"   s"],[-1,"teps = np"],[0,"\\n  "]],2023,2023,17,8]],"time":1446004374710}
{"patch":[[[[0,"        "],[-1,"s"],[0,"\\n      "]],2018,2018,17,16]],"time":1446004370707}
{"patch":[[[[0,"(sel"],[-1,"f.t + 1"],[0,")\\n "]],2086,2086,15,8]],"time":1446004349634}
{"patch":[[[[0,"in l"],[-1,"en(sel)"],[0,"\\n  "]],2080,2080,15,8]],"time":1446004345629}
{"patch":[[[[0,"    "],[-1,"for i in l"],[0,"\\n  "]],2070,2070,18,8]],"time":1446004341626}
{"patch":[[[[0,"        "],[-1,"\\n            "],[0,"sol = se"]],2066,2066,30,16]],"time":1446004337627}
{"patch":[[[[0,"ay(["],[1,"x"],[0,"dtx, "],[1,"y"],[0,"dty, "],[1,"z"],[0,"dtz]"]],1027,1027,18,21]],"time":1446004270418}
{"patch":[[[[0," ydt"],[-1,"y"],[0,", zdt"],[-1,"z"],[0,"])\\n"]],1036,1036,15,13]],"time":1446004266418}
{"patch":[[[[0,"    "],[1,"z"],[0,"dt"],[-1,"z"],[0," = z"]],976,976,11,11],[[[0,"ray([xdt"],[-1,"x"],[0,", ydt, z"]],1026,1026,17,16]],"time":1446004262418}
{"patch":[[[[0,"      dt"],[-1,"x"],[0," = x + ("]],906,906,17,16],[[[0,"        "],[1,"y"],[0,"dt"],[-1,"y"],[0," = y + ("]],937,937,19,19]],"time":1446004258414}
{"patch":[[[[0,"z)\\n        "],[1,"x"],[0,"dt = x + (dx"]],900,900,24,25]],"time":1446004254417}
{"patch":[[[[0,"_count\":"],[-1,"5"],[1,"3"],[0,",\"output"]],4104,4104,17,17],[[[0,"n-input-"],[-1,"5"],[1,"3"],[0,"-ec4dc87"]],4466,4466,17,17],[[[0,"put-"],[-1,"4-3c977c4303c0"],[1,"1-0104f5dd249a"],[0,">\\u0"]],5100,5100,22,22],[[[0,"2m     7"],[-1,"2"],[1,"0"],[0,"\\u001b[0"]],5200,5200,17,17],[[[0,"2m     7"],[-1,"3"],[1,"1"],[0,"\\u001b[0"]],5329,5329,17,17],[[[0,"2m---> 7"],[-1,"4"],[1,"2"],[0,"\\u001b[1"]],5390,5390,17,17],[[[0,"2m     7"],[-1,"5"],[1,"3"],[0,"\\u001b[0"]],5975,5975,17,17],[[[0,"2m     7"],[-1,"6"],[1,"4"],[0,"\\u001b[0"]],6142,6142,17,17]],"time":1446003941952}
{"patch":[[[[0,"xecution_count\":"],[-1,"4"],[1,"1"],[0,",\"outputs\":[]}\n\""]],3935,3935,33,33]],"time":1446003937946}
{"patch":[[[[0,"csv(\\\"so"],[-1,"lution"],[0,".csv\\\")\\"]],2421,2421,22,16]],"time":1446001990963}
{"patch":[[[[0,"o_csv(\\\""],[-1,"so"],[0,".csv\\\")\\"]],2419,2419,18,16]],"time":1446001986961}
{"patch":[[[[0,"o_csv(\\\""],[1,"expor"],[0,".csv\\\")\\"]],2419,2419,16,21]],"time":1446001982946}
{"patch":[[[[0,"(\\\"expor"],[1,"t"],[0,".csv\\\")\\"]],2424,2424,16,17]],"time":1446001978944}
{"patch":[[[[0,"        "],[-1,"\\n        \\n        "],[0,"if order"]],2018,2018,36,16]],"time":1446001891999}
{"patch":[[[[0,"xecution_count\":"],[-1,"3"],[1,"2"],[0,",\"outputs\":[{\"ou"]],4074,4074,33,33],[[[0,"put-"],[-1,"3-ec4dc8794ef3"],[1,"2-6d6328fd0999"],[0,">\\u0"]],4448,4448,22,22],[[[0,"\\u001b[0m\\u001b["],[1,"0morder\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;36m1\\u001b[0m\\u001b["],[0,"1;33m)\\u001b[0m\\"]],4810,4810,32,99]],"time":1446001776658}
{"patch":[[[[0,".evolve("],[1,"order="],[0,")\\na.plo"]],3964,3964,16,22]],"time":1446001772654}
{"patch":[[[[0,"e(order="],[1,"1"],[0,")\\na.plo"]],3970,3970,16,17]],"time":1446001768687}
{"patch":[[[[0,"_count\":"],[-1,"1"],[1,"null"],[0,",\"output"]],3921,3921,17,20],[[[0,"_count\":"],[-1,"2"],[1,"44"],[0,",\"output"]],4092,4092,17,18],[[[0,":[{\""],[-1,"output_type\":\"error\",\""],[0,"enam"]],4112,4112,30,8],[[[0,"n-input-"],[-1,"2"],[1,"44"],[0,"-6d6328f"]],4433,4433,17,18],[[[0,"n-input-"],[-1,"1"],[1,"43"],[0,"-0104f5d"]],5131,5131,17,18],[[[0,"(4, 3)\"]"],[1,",\"output_type\":\"error\""],[0,"}]}\n\"%ti"]],10905,10905,16,38]],"time":1446001760641}
{"patch":[[[[0,"xecution_count\":"],[-1,"null"],[1,"43"],[0,",\"outputs\":[]}\n\""]],3913,3913,36,34]],"time":1446001756628}
{"patch":[[[[-1,"{\"notebook_name\":\"ExploreAtrractor.ipynb\"}\n\"import numpy as np\\nimport matplotlib.pyplot as plt\\nfrom mpl_toolkits.mplot3d import Axes3D\\nimport pandas as pd\\n%matplotlib inline\\n\\nclass Attractor(object):\\n    \\n    def __init__(self, s=10.0, p=28.0, b=(8.0/3.0), start=0.0, end=80.0, points=10000):\\n        self.s = s\\n        self.p = p\\n        self.b = b\\n        self.params = np.array([self.s, self.p, self.b])\\n        self.start = start\\n        self.end = end\\n        self.points = points\\n        self.t = np.linspace(self.start, self.end, self.points)\\n        self.dt = (self.end - self.start)/self.points\\n    \\n    def euler(self, a = np.array([]), dt = 0):\\n        if dt == 0:\\n            dt = self.dt\\n        x = a[0]\\n        y = a[1]\\n        z = a[2]\\n        dx = self.params[0] * (y - x)\\n        dy = x * (self.params[1] - z) - y\\n        dz = (x * y) - (self.params[2] * z)\\n        xdt = x + (dx * self.dt)\\n        ydt = y + (dy * self.dt)\\n        zdt = z + (dz * self.dt)\\n        return np.array([xdt, ydt, zdt])\\n        \\n    def rk2(self, b = np.array([])):\\n        dt = self.dt / 2.0\\n        rk1 = self.euler(b)\\n        x1 = b[0] + rk1[0] * new_dt\\n        y1 = b[1] + rk1[1] * new_dt\\n        z1 = b[2] + rk1[2] * new_dt\\n        return self.euler(np.array([x1, y1, z1]), dt)\\n        \\n              \\n    def rk3(self, c = np.array([])):\\n        dt = self.dt / 2.0\\n        rk2 = self.rk1(c)\\n        x2 = c[0] + rk2[0] * new_dt\\n        y2 = c[1] + rk2[1] * new_dt\\n        z2 = c[2] + rk2[2] * new_dt\\n        return self.euler(np.array([x2, y2, z2]), dt)\\n        \\n    def rk4(self, d = np.array([])):\\n        dt = self.dt\\n        dt = self.dt\\n        dt = self.dt\\n        rk3 = self.rk2(d)\\n        x3 = d[0] + rk3[0] * self.dt\\n        y3 = d[1] + rk3[1] * self.dt\\n        z3 = d[2] + rk3[2] * self.dt\\n        return self.euler(np.array([x3, y3, z3]), dt)\\n        \\n                            \\n    def evolve(self, r0 = np.array([0.1, 0.0, 0.0]), order=1):\\n        if order == 1:\\n            sol = self.euler(r0)\\n        elif order == 2:\\n            sol = self.rk2(r0)\\n        elif order == 4:\\n            sol = self.rk4(r0)\\n        else:\\n            return 'Uh oh'\\n        \\n        self.solution = pd.DataFrame(sol, columns=['t','x','y','z'])\\n        return self.solution\\n        \\n    def save(self):\\n        self.solution.to_csv(\\\"export.csv\\\")\\n        \\n    def plotx(self):\\n        plt.plot(self.solution['x'], color='k')\\n        plt.title(\\\"Plot tx\\\")\\n        plt.tlabel(\\\"t\\\")\\n        plt.xlabel(\\\"X\\\")\\n        \\n        \\n    def ploty(self):\\n        plt.plot(self.solution['y'], color='k')\\n        plt.title(\\\"Plot ty\\\")\\n        plt.tlabel(\\\"t\\\")\\n        plt.ylabel(\\\"Y\\\")\\n        \\n    def plotz(self):\\n        plt.plot(self.solution['z'], color='k')\\n        plt.title(\\\"Plot tz\\\")\\n        plt.tlabel(\\\"t\\\")\\n        plt.zlabel(\\\"Z\\\")\\n        \\n    def plotxy(self):\\n        plt.plot(self.solution['x'], self.solution['y'], color='k')\\n        plt.title(\\\"Plot xy\\\")\\n        plt.xlabel(\\\"X\\\")\\n        plt.ylabel(\\\"Y\\\")\\n        \\n    def plotyz(self):\\n        plt.plot(self.solution['y'], self.solution['z'], color='k')\\n        plt.title(\\\"Plot yz\\\")\\n        plt.ylabel(\\\"Y\\\")\\n        plt.zlabel(\\\"Z\\\")\\n        \\n    def plotzx(self):\\n        plt.plot(self.solution['z'], self.solution['x'], color='k')\\n        plt.title(\\\"Plot zx\\\")\\n        plt.zlabel(\\\"Z\\\")\\n        plt.xlabel(\\\"X\\\")\\n    \\n    def plot3d(self):\\n        fig = plt.figure()\\n        ax = fig.gca(projection='3d')\\n\\n        ax.plot(self.solution['x'], self.solution['y'], self.solution['z'])\\n        ax.set_xlabel(\\\"X Axis\\\")\\n        ax.set_ylabel(\\\"Y Axis\\\")\\n        ax.set_zlabel(\\\"Z Axis\\\")\\n        ax.set_title(\\\"Lorenz Attractor\\\")\\n\\n        plt.show()\\n\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":43,\"outputs\":[]}\n\"a = Attractor()\\na.evolve(order=1)\\na.plot3d()\\n\"︡{\"metadata\":{\"scrolled\":false,\"collapsed\":false,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":44,\"outputs\":[{\"ename\":\"ValueError\",\"evalue\":\"Shape of passed values is (1, 3), indices imply (4, 3)\",\"traceback\":[\"\\u001b[1;31m---------------------------------------------------------------------------\\u001b[0m\",\"\\u001b[1;31mValueError\\u001b[0m                                Traceback (most recent call last)\",\"\\u001b[1;32m<ipython-input-44-6d6328fd0999>\\u001b[0m in \\u001b[0;36m<module>\\u001b[1;34m()\\u001b[0m\\n\\u001b[0;32m      1\\u001b[0m \\u001b[0ma\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mAttractor\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m----> 2\\u001b[1;33m \\u001b[0ma\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mevolve\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0morder\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;36m1\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m      3\\u001b[0m \\u001b[0ma\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mplot3d\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;32m<ipython-input-43-0104f5dd249a>\\u001b[0m in \\u001b[0;36mevolve\\u001b[1;34m(self, r0, order)\\u001b[0m\\n\\u001b[0;32m     70\\u001b[0m             \\u001b[1;32mreturn\\u001b[0m \\u001b[1;34m'Uh oh'\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m     71\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m---> 72\\u001b[1;33m         \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0msolution\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0mpd\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mDataFrame\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0msol\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mcolumns\\u001b[0m\\u001b[1;33m=\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;34m't'\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;34m'x'\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;34m'y'\\u001b[0m\\u001b[1;33m,\\u001b[0m\\u001b[1;34m'z'\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m     73\\u001b[0m         \\u001b[1;32mreturn\\u001b[0m \\u001b[0mself\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0msolution\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m     74\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;32m/projects/sage/sage-6.9/local/lib/python2.7/site-packages/pandas/core/frame.py\\u001b[0m in \\u001b[0;36m__init__\\u001b[1;34m(self, data, index, columns, dtype, copy)\\u001b[0m\\n\\u001b[0;32m    243\\u001b[0m             \\u001b[1;32melse\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    244\\u001b[0m                 mgr = self._init_ndarray(data, index, columns, dtype=dtype,\\n\\u001b[1;32m--> 245\\u001b[1;33m                                          copy=copy)\\n\\u001b[0m\\u001b[0;32m    246\\u001b[0m         \\u001b[1;32melif\\u001b[0m \\u001b[0misinstance\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mdata\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m(\\u001b[0m\\u001b[0mlist\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mtypes\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mGeneratorType\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    247\\u001b[0m             \\u001b[1;32mif\\u001b[0m \\u001b[0misinstance\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mdata\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mtypes\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mGeneratorType\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;32m/projects/sage/sage-6.9/local/lib/python2.7/site-packages/pandas/core/frame.py\\u001b[0m in \\u001b[0;36m_init_ndarray\\u001b[1;34m(self, values, index, columns, dtype, copy)\\u001b[0m\\n\\u001b[0;32m    410\\u001b[0m             \\u001b[0mvalues\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0m_possibly_infer_to_datetimelike\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mvalues\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    411\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m--> 412\\u001b[1;33m         \\u001b[1;32mreturn\\u001b[0m \\u001b[0mcreate_block_manager_from_blocks\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[0mvalues\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;33m[\\u001b[0m\\u001b[0mcolumns\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mindex\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m    413\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m    414\\u001b[0m     \\u001b[1;33m@\\u001b[0m\\u001b[0mproperty\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;32m/projects/sage/sage-6.9/local/lib/python2.7/site-packages/pandas/core/internals.py\\u001b[0m in \\u001b[0;36mcreate_block_manager_from_blocks\\u001b[1;34m(blocks, axes)\\u001b[0m\\n\\u001b[0;32m   3548\\u001b[0m         \\u001b[0mblocks\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[1;33m[\\u001b[0m\\u001b[0mgetattr\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mb\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[1;34m'values'\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mb\\u001b[0m\\u001b[1;33m)\\u001b[0m \\u001b[1;32mfor\\u001b[0m \\u001b[0mb\\u001b[0m \\u001b[1;32min\\u001b[0m \\u001b[0mblocks\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   3549\\u001b[0m         \\u001b[0mtot_items\\u001b[0m \\u001b[1;33m=\\u001b[0m \\u001b[0msum\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mb\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mshape\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;36m0\\u001b[0m\\u001b[1;33m]\\u001b[0m \\u001b[1;32mfor\\u001b[0m \\u001b[0mb\\u001b[0m \\u001b[1;32min\\u001b[0m \\u001b[0mblocks\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[1;32m-> 3550\\u001b[1;33m         \\u001b[0mconstruction_error\\u001b[0m\\u001b[1;33m(\\u001b[0m\\u001b[0mtot_items\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0mblocks\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;36m0\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m.\\u001b[0m\\u001b[0mshape\\u001b[0m\\u001b[1;33m[\\u001b[0m\\u001b[1;36m1\\u001b[0m\\u001b[1;33m:\\u001b[0m\\u001b[1;33m]\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0maxes\\u001b[0m\\u001b[1;33m,\\u001b[0m \\u001b[0me\\u001b[0m\\u001b[1;33m)\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0m\\u001b[0;32m   3551\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   3552\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;32m/projects/sage/sage-6.9/local/lib/python2.7/site-packages/pandas/core/internals.py\\u001b[0m in \\u001b[0;36mconstruction_error\\u001b[1;34m(tot_items, block_shape, axes, e)\\u001b[0m\\n\\u001b[0;32m   3525\\u001b[0m         \\u001b[1;32mraise\\u001b[0m \\u001b[0me\\u001b[0m\\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   3526\\u001b[0m     raise ValueError(\\\"Shape of passed values is {0}, indices imply {1}\\\".format(\\n\\u001b[1;32m-> 3527\\u001b[1;33m         passed,implied))\\n\\u001b[0m\\u001b[0;32m   3528\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\\u001b[0;32m   3529\\u001b[0m \\u001b[1;33m\\u001b[0m\\u001b[0m\\n\",\"\\u001b[1;31mValueError\\u001b[0m: Shape of passed values is (1, 3), indices imply (4, 3)\"],\"output_type\":\"error\"}]}\n\"%timeit Attractor\\n\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":3,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"10000000 loops, best of 3: 50.8 ns per loop\\n\"}]}\n\"%time Attractor\"︡{\"metadata\":{\"collapsed\":false,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":4,\"outputs\":[{\"output_type\":\"stream\",\"name\":\"stdout\",\"text\":\"CPU times: user 0 ns, sys: 0 ns, total: 0 ns\\nWall time: 7.15 µs\\n\"},{\"execution_count\":4,\"output_type\":\"execute_result\",\"data\":{\"text/plain\":\"__main__.Attractor\"},\"metadata\":{}}]}\n\"\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}\n\"\"︡{\"metadata\":{\"collapsed\":true,\"trusted\":true},\"cell_type\":\"code\",\"execution_count\":null,\"outputs\":[]}"]],0,0,11707,0]],"time":1445992712460}