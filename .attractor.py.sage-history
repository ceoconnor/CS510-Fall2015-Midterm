"import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport pandas as pd\n\n\nclass Attractor(object):\n    \n    def __init__(self, s=10.0, p=28.0, b=(8.0/3.0), start=0.0, end=80.0, points=10000):\n        self.s = s\n        self.p = p\n        self.b = b\n        self.params = np.array([self.s, self.p, self.b])\n        self.start = start\n        self.end = end\n        self.points = points\n        self.dt = (self.end - self.start)/self.points\n        self.t = np.arange(self.start+1, self.end, self.dt)\n    \n    def euler(self, a = np.array([]), dt = 0):\n        if dt == 0:\n            dt = self.dt\n        x = a[0]\n        y = a[1]\n        z = a[2]\n        dx = self.params[0] * (y - x)\n        dy = x * (self.params[1] - z) - y\n        dz = (x * y) - (self.params[2] * z)\n        dtx = x + (dx * self.dt)\n        dty = y + (dy * self.dt)\n        dtz = z + (dz * self.dt)\n        return np.array([dtx, dty, dtz])\n        \n    def rk2(self, b = np.array([])):\n        dt = self.dt / 2.0\n        rk1 = self.euler(b)\n        x1 = b[0] + rk1[0] * dt\n        y1 = b[1] + rk1[1] * dt\n        z1 = b[2] + rk1[2] * dt\n        return self.euler(np.array([x1, y1, z1]), dt)\n        \n              \n    def rk3(self, c = np.array([])):\n        dt = self.dt / 2.0\n        rk2 = self.rk1(c)\n        x2 = c[0] + rk2[0] * dt\n        y2 = c[1] + rk2[1] * dt\n        z2 = c[2] + rk2[2] * dt\n        return self.euler(np.array([x2, y2, z2]), dt)\n        \n    def rk4(self, d = np.array([])):\n        dt = self.dt\n        rk3 = self.rk2(d)\n        x3 = d[0] + rk3[0] * dt\n        y3 = d[1] + rk3[1] * dt\n        z3 = d[2] + rk3[2] * dt\n        return self.euler(np.array([x3, y3, z3]), dt)\n        \n                            \n    def evolve(self, r0 = np.array([0.1, 0.0, 0.0]), order=4):\n        ts = np.append(self.t, self.end)\n        sol = np.array(np.append(0, r0))\n        \n        if order == 1:    \n            for i in ts:\n                e = self.euler(r0)\n                sol = np.vstack((sol,np.append(i, e)))\n        elif order == 2:\n            for i in ts:\n                e = self.rk2(r0)\n                sol = np.vstack((sol,np.append(i, e)))\n        elif order == 4:\n            for i in ts:\n                e = self.rk4(r0)\n                sol = np.vstack((sol,np.append(i, e)))\n        else:\n            return 'Uh oh'\n        \n        self.solution = pd.DataFrame(sol)\n        self.solution.columns =['t','x','y','z']\n        return self.solution\n        \n    def save(self):\n        self.solution.to_csv(\"solution.csv\")\n        \n    def plotx(self):\n        plt.plot(self.solution['x'])\n        plt.show()\n        \n        \n    def ploty(self):\n        plt.plot(self.solution['y'])\n        plt.show()\n        \n    def plotz(self):\n        plt.plot(self.solution['z'])\n        plt.show()\n        \n    def plotxy(self):\n        plt.plot(self.solution['t'], self.solution['x'], 'k')\n        plt.plot(self.solution['t'], self.solution['y'], 'r')\n        plt.show()\n        \n    def plotyz(self):\n        plt.plot(self.solution['t'], self.solution['y'], 'k')\n        plt.plot(self.solution['t'], self.solution['z'], 'r')\n        plt.show()\n        \n    def plotzx(self):\n        plt.plot(self.solution['t'], self.solution['z'], 'k')\n        plt.plot(self.solution['t'], self.solution['x'], 'r')\n        plt.show()\n    \n    def plot3d(self):\n        fig = plt.figure()\n        ax = fig.add_subplot(111, projection='3d')\n\n        ax.plot(self.solution['x'], self.solution['y'], self.solution['z'])\n        ax.set_xlabel(\"X Axis\")\n        ax.set_ylabel(\"Y Axis\")\n        ax.set_zlabel(\"Z Axis\")\n        ax.set_title(\"Lorenz Attractor\")\n\n        plt.show()\n"
{"patch":[[[[0,"s as pd\n"],[1,"%matplotlib inline"],[0,"\n\nclass "]],103,103,16,34]],"time":1446013812064}
{"patch":[[[[0,"s pd"],[-1,"\n%matplotlib inline"],[0,"\n\ncl"]],106,106,27,8],[[[0,"elf."],[-1,"d"],[0,"t = "],[-1,"(self.end - self.start)/"],[1,"np.linspace(self.start, self.end, "],[0,"self"]],432,432,37,46],[[[0," self.points"],[1,")"],[0,"\n        sel"]],473,473,24,25],[[[0,"elf."],[1,"d"],[0,"t = "],[-1,"np.arange("],[1,"(self.end - "],[0,"self"]],496,496,22,25],[[[0,"tart"],[-1,"+1, "],[1,")/"],[0,"self."],[-1,"end, self.dt)"],[1,"points"],[0,"\n   "]],523,523,30,21],[[[0," + rk1[0] * "],[1,"new_"],[0,"dt\n        y"]],1071,1071,24,28],[[[0," + rk1[1] * "],[1,"new_"],[0,"dt\n        z"]],1107,1107,24,28],[[[0," + rk1[2] * "],[1,"new_"],[0,"dt\n        r"]],1143,1143,24,28],[[[0," + rk2[0] * "],[1,"new_"],[0,"dt\n        y"]],1347,1347,24,28],[[[0," + rk2[1] * "],[1,"new_"],[0,"dt\n        z"]],1383,1383,24,28],[[[0," + rk2[2] * "],[1,"new_"],[0,"dt\n        r"]],1419,1419,24,28],[[[0,"   dt = self.dt\n"],[1,"        dt = self.dt\n        dt = self.dt\n"],[0,"        rk3 = se"]],1543,1543,32,74],[[[0," + rk3[0] * "],[1,"self."],[0,"dt\n        y"]],1644,1644,24,29],[[[0," + rk3[1] * "],[1,"self."],[0,"dt\n        z"]],1681,1681,24,29],[[[0,"k3[2] * "],[1,"self."],[0,"dt\n     "]],1722,1722,16,21],[[[0,", order="],[-1,"4"],[1,"1"],[0,"):\n     "]],1881,1881,17,17],[[[0,"    "],[-1,"ts = np.append(self.t, self.end)\n        sol = np.array(np.append(0, r0)"],[1,"steps = np.array([]"],[0,")\n  "]],1897,1897,80,27],[[[0,"er == 1:"],[-1,"    "],[0,"\n       "]],1945,1945,20,16],[[[0,"    "],[-1,"for i in ts:\n                e = self.euler(r0)\n                sol = np.vstack((sol,np.append(i, e)))\n        elif order == 2:\n            for i in ts:\n                e = self.rk2(r0)\n                sol = np.vstack((sol,np.append(i, e)))\n        elif order == 4:\n            for i in ts:\n                e = self.rk4(r0)\n                sol = np.vstack((sol,np.append(i, e))"],[1,"sol = self.euler(r0)\n        elif order == 2:\n            sol = self.rk2(r0)\n        elif order == 4:\n            sol = self.rk4(r0"],[0,")\n  "]],1962,1962,385,139],[[[0,"(sol"],[-1,")\n        self.solution."],[1,", "],[0,"columns"],[-1," "],[0,"=['t"]],2185,2185,40,17],[[[0,"'y','z']"],[1,")"],[0,"\n       "]],2208,2208,16,17],[[[0,"ion['x']"],[1,", color='k'"],[0,")\n      "]],2378,2378,16,27],[[[0,"k')\n        plt."],[-1,"show("],[1,"title(\"Plot tx\")\n        plt.tlabel(\"t\")\n        plt.xlabel(\"X\""],[0,")\n        \n     "]],2395,2395,37,95],[[[0,"ion['y']"],[1,", color='k'"],[0,")\n      "]],2542,2542,16,27],[[[0,"k')\n        plt."],[-1,"show("],[1,"title(\"Plot ty\")\n        plt.tlabel(\"t\")\n        plt.ylabel(\"Y\""],[0,")\n        \n    d"]],2559,2559,37,95],[[[0,"lf.solution['z']"],[1,", color='k'"],[0,")\n        plt.sh"]],2689,2689,32,43],[[[0,"k')\n        plt."],[-1,"show("],[1,"title(\"Plot tz\")\n        plt.tlabel(\"t\")\n        plt.zlabel(\"Z\""],[0,")\n        \n    d"]],2714,2714,37,95],[[[0,"(self.solution['"],[-1,"t"],[1,"x"],[0,"'], self.solutio"]],2842,2842,33,33],[[[0,"lution['"],[-1,"x"],[1,"y"],[0,"'], "],[1,"color="],[0,"'k')\n   "]],2870,2870,21,27],[[[0,"plt."],[-1,"plot(self.solution['t'], self.solution['y'], 'r'"],[1,"title(\"Plot xy\")\n        plt.xlabel(\"X\""],[0,")\n  "]],2902,2902,56,47],[[[0,"X\")\n        plt."],[-1,"show("],[1,"ylabel(\"Y\""],[0,")\n        \n    d"]],2943,2943,37,42],[[[0,"(self.solution['"],[-1,"t"],[1,"y"],[0,"'], self.solutio"]],3018,3018,33,33],[[[0,"lution['"],[-1,"y"],[1,"z"],[0,"'], "],[1,"color="],[0,"'k')\n   "]],3046,3046,21,27],[[[0,"plt."],[-1,"plot(self.solution['t'], self.solution['z'], 'r'"],[1,"title(\"Plot yz\")\n        plt.ylabel(\"Y\""],[0,")\n  "]],3078,3078,56,47],[[[0,"        plt."],[-1,"show("],[1,"zlabel(\"Z\""],[0,")\n        \n "]],3123,3123,29,34],[[[0,"(self.solution['"],[-1,"t"],[1,"z"],[0,"'], self.solutio"]],3194,3194,33,33],[[[0,"lution['"],[-1,"z"],[1,"x"],[0,"'], "],[1,"color="],[0,"'k')\n   "]],3222,3222,21,27],[[[0,"plt."],[-1,"plot(self.solution['t'], self.solution['x'], 'r'"],[1,"title(\"Plot zx\")\n        plt.zlabel(\"Z\""],[0,")\n  "]],3254,3254,56,47],[[[0,"    plt."],[-1,"show("],[1,"xlabel(\"X\""],[0,")\n    \n "]],3303,3303,21,26],[[[0,"fig."],[-1,"add_subplot(111, "],[1,"gca("],[0,"proj"]],3390,3390,25,12]],"time":1446013717821}
{"patch":[[[[0,"r == 1:\n"],[1,"\n"],[0,"        "]],1946,1946,16,17]],"time":1446006692692}
{"patch":[[[[0,"r == 1:\n"],[1,"            for i in len(self.t + 1)\n                "],[0,"\n       "]],1946,1946,16,69]],"time":1446006690692}
{"patch":[[[[0,"        "],[1,"x"],[0,"dt"],[-1,"x"],[0," = x + ("]],813,813,19,19],[[[0,"        "],[1,"y"],[0,"dt"],[-1,"y"],[0," = y + ("]],846,846,19,19],[[[0,"        "],[1,"z"],[0,"dt"],[-1,"z"],[0," = z + ("]],879,879,19,19],[[[0,"ay(["],[1,"x"],[0,"dt"],[-1,"x"],[0,", "],[1,"y"],[0,"dt"],[-1,"y"],[0,", "],[1,"z"],[0,"dt"],[-1,"z"],[0,"])\n "]],933,933,21,21],[[[0,"    "],[-1,"steps = np.array([])\n        \n        if order == 1:\n            for i in len(self.t + 1)\n                "],[1,"if order == 1:"],[0,"\n   "]],1897,1897,114,22],[[[0,"to_csv(\""],[-1,"solution"],[1,"export"],[0,".csv\")\n "]],2260,2260,24,22]],"time":1446004568766}
{"patch":[[[[0,"ce(s"],[-1,"elf.start, self.end, self.points)\n        self.dt = (self.end - self.start)/self.points\n    \n    def euler(self, a = np.array([]), dt = 0):\n        if dt == 0:\n            dt = self.dt\n        x = a[0]\n        y = a[1]\n        z = a[2]\n        dx = self.params[0] * (y - x)\n        dy = x * (self.params[1] - z) - y\n        dz = (x * y) - (self.params[2] * z)\n        xdt = x + (dx * self.dt)\n        ydt = y + (dy * self.dt)\n        zdt = z + (dz * self.dt)\n        return np.array([xdt, ydt, zdt])\n        \n    def rk2(self, b = np.array([])):\n        dt = self.dt / 2.0\n        rk1 = self.euler(b)\n        x1 = b[0] + rk1[0] * new_dt\n        y1 = b[1] + rk1[1] * new_dt\n        z1 = b[2] + rk1[2] * new_dt\n        return self.euler(np.array([x1, y1, z1]), dt)\n        \n              \n    def rk3(self, c = np.array([])):\n        dt = self.dt / 2.0\n        rk2 = self.rk1(c)\n        x2 = c[0] + rk2[0] * new_dt\n        y2 = c[1] + rk2[1] * new_dt\n        z2 = c[2] + rk2[2] * new_dt\n        return self.euler(np.array([x2, y2, z2]), dt)\n        \n    def rk4(self, d = np.array([])):\n        dt = self.dt\n        dt = self.dt\n        dt = self.dt\n        rk3 = self.rk2(d)\n        x3 = d[0] + rk3[0] * self.dt\n        y3 = d[1] + rk3[1] * self.dt\n        z3 = d[2] + rk3[2] * self.dt\n        return self.euler(np.array([x3, y3, z3]), dt)\n        \n                            \n    def evolve(self, r0 = np.array([0.1, 0.0, 0.0]), order=1):\n        if order == 1:\n            sol = self.euler(r0)\n        elif order == 2:\n            sol = self.rk2(r0)\n        elif order == 4:\n            sol = self.rk4(r0)\n        else:\n            return 'Uh oh'\n        \n        self.solution = pd.DataFrame(sol, columns=['t','x','y','z'])"],[1,"tart,end,points)\n        self.dt = np.abs(self.t[1]-self.t[0])\n    \n    def deriv(self):\n        self.x = np.empty([self.points + 1.0])\n        self.y = np.empty([self.points + 1.0])\n        self.z = np.empty([self.points + 1.0])\n        self.dx = self.s * (self.y - self.x)\n        self.dy = self.x * (self.p - self.z)  - self.y\n        self.dz = self.x * self.y - self.b * self.z\n        return self.dx, self.dy, self.dz\n    \n    def euler(self):\n        self.k1x = np.array([])\n        self.k1y = np.array([])\n        self.k1z = np.array([])\n        for i in np.arange(len(self.t)):\n            self.k1x = np.append(self.k1x, self.dx[i]*self.x*self.dt)\n            self.k1y = np.append(self.k1y, self.dy[i]*self.y*self.dt)\n            self.k1z = np.append(self.k1z, self.dz[i]*self.z*self.dt)\n            self.x[i] = self.x[i] + self.k1x[i]\n            self.y[i] = self.y[i] + self.k1y[i]\n            self.z[i] = self.z[i] + self.k1z[i]\n        return self.x, self.y, self.z\n        \n    def rk2(self):\n        self.k1x = np.array([])\n        self.k1y = np.array([])\n        self.k1z = np.array([])\n        self.k2x = np.array([])\n        self.k2y = np.array([])\n        self.k2z = np.array([])\n        self.xk = np.array([])\n        self.yk = np.array([])\n        self.zk = np.array([])\n        for i in np.arange(len(self.t)):\n            self.k1x = np.append(self.k1x, self.dx[i]*self.x*self.dt)\n            self.k1y = np.append(self.k1y, self.dy[i]*self.y*self.dt)\n            self.k1z = np.append(self.k1z, self.dz[i]*self.z*self.dt)\n            self.xk = np.append(self.xk, self.x[i] + self.k1x[i] * 0.5)\n            self.yk = np.append(self.yk, self.y[i] + self.k1y[i] * 0.5)\n            self.zk = np.append(self.zk, self.z[i] + self.k1z[i] * 0.5)\n            self.k2x = np.append(self.k2x, self.dx[i] * self.xk * self.dt)\n            self.k2y = np.append(self.k2y, self.dy[i] * self.yk * self.dt)\n            self.k2z = np.append(self.k2z, self.dz[i] * self.zk * self.dt)\n            self.x[i] = self.x[i] + (0.5 * self.k2x[i])\n            self.y[i] = self.y[i] + (0.5 * self.k2y[i])\n            self.z[i] = self.z[i] + (0.5 * self.k2z[i])\n        return self.x, self.y, self.z\n              \n    def rk4(self):\n        self.k1x = np.array([])\n        self.k1y = np.array([])\n        self.k1z = np.array([])\n        self.k2x = np.array([])\n        self.k2y = np.array([])\n        self.k2z = np.array([])\n        self.k3x = np.array([])\n        self.k3y = np.array([])\n        self.k3z = np.array([])\n        self.k4x = np.array([])\n        self.k4y = np.array([])\n        self.k4z = np.array([])\n        self.xk = np.array([])\n        self.yk = np.array([])\n        self.zk = np.array([])\n        \n        for i in np.arange(len(self.t)):\n            self.k1x = np.append(self.k1x, self.dx[i]*self.x*self.dt)\n            self.k1y = np.append(self.k1y, self.dy[i]*self.y*self.dt)\n            self.k1z = np.append(self.k1z, self.dz[i]*self.z*self.dt)\n            self.xk = np.append(self.xk, self.x[i] + self.k1x[i] * 0.5)\n            self.yk = np.append(self.yk, self.y[i] + self.k1y[i] * 0.5)\n            self.zk = np.append(self.zk, self.z[i] + self.k1z[i] * 0.5)\n            self.k2x = np.append(self.k2x, self.dx[i] * self.xk * self.dt)\n            self.k2y = np.append(self.k2y, self.dy[i] * self.yk * self.dt)\n            self.k2z = np.append(self.k2z, self.dz[i] * self.zk * self.dt)\n            self.xk[i] = self.x[i] + self.k2x[i] * 0.5\n            self.yk[i] = self.y[i] + self.k2y[i] * 0.5\n            self.zk[i] = self.z[i] + self.k2z[i] * 0.5\n            self.k3x = np.append(self.k3x, self.dx[i] * self.xk * self.dt)\n            self.k3y = np.append(self.k3y, self.dy[i] * self.yk * self.dt)\n            self.k3z = np.append(self.k3z, self.dz[i] * self.zk * self.dt)\n            self.xk[i] = self.x[i] + self.k3x[i]\n            self.yk[i] = self.y[i] + self.k3y[i]\n            self.zk[i] = self.z[i] + self.k3z[i]\n            self.k4x = np.append(self.k4x, self.dx[i] * self.xk * self.dt)\n            self.k4y = np.append(self.k4y, self.dy[i] * self.yk * self.dt)\n            self.k4z = np.append(self.k4z, self.dz[i] * self.zk * self.dt)\n            self.x[i] = self.x[i] + (self.k1x[i] + 2*(self.k2x[i] + self.k3x[i]) + self.k4x[i])/6.0\n            self.y[i] = self.y[i] + (self.k1y[i] + 2*(self.k2y[i] + self.k3y[i]) + self.k4y[i])/6.0\n            self.z[i] = self.z[i] + (self.k1z[i] + 2*(self.k2z[i] + self.k3z[i]) + self.k4z[i])/6.0\n        return self.x, self.y, self.z\n                            \n    def evolve(self, x0=0.1, y0=0.0, z0=0.0, order=4):\n        self.x0 = x0\n        self.y0 = y0\n        self.z0 = z0\n        self.x[0] = self.x0\n        self.y[0] = self.y0\n        self.z[0] = self.z0\n        self.r0=np.array([self.x0, self.y0, self.z0])\n        \n        if order == 1:\n            self.solution = pd.DataFrame(self.euler())\n        elif order == 2:\n            self.solution = pd.DataFrame(self.rk2())\n        elif order == 4:\n            self.solution = pd.DataFrame(self.rk4())\n        else:\n            self.solution = 0"],[0,"\n   "]],449,449,1734,5080],[[[0,"t.plot(self."],[-1,"solution['x']"],[1,"t, self.x"],[0,", color='k')"]],5667,5667,37,33],[[[0,"t.plot(self."],[-1,"solution['y']"],[1,"t, self.y"],[0,", color='k')"]],5827,5827,37,33],[[[0,"t.plot(self."],[-1,"solution['z']"],[1,"t, self.z"],[0,", color='k')"]],5978,5978,37,33],[[[0,"elf."],[-1,"solution['x'], self.solution['y']"],[1,"x, self.y"],[0,", co"]],6138,6138,41,17],[[[0,"elf."],[-1,"solution['y'], self.solution['z']"],[1,"y, self.z"],[0,", co"]],6290,6290,41,17],[[[0,"elf."],[-1,"solution['z'], self.solution['x']"],[1,"z, self.x"],[0,", co"]],6442,6442,41,17],[[[0,"elf."],[-1,"solution['x'], self.solution['y'], self.solution['z']"],[1,"x, self.y, self.z"],[0,")\n  "]],6655,6655,61,25]],"time":1445992687289}